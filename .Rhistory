scale_fill_reach_categorical(n=nrow(distinct(.data,!!dependent.var.value)),name="")+
scale_y_continuous(limits = c(0,100),labels = scales::percent_format(scale=1))
# +geom_errorbar( aes(x=!!independent.var.value,
#                        ymin=as.numeric(!!result_min),
#                        ymax=as.numeric(!!result_max)),
#                    position=position_dodge(width=0.9),
#                    stat='identity',
#                    width=.1)+ theme(axis.text.x = element_text(angle = 45, hjust = 1))
return(theplot)
}
thplot <-fun(table_result_percent, region, choice, percents, min, max)
thplot
fun <- function(.data,independent.var.value,dependent.var.value,result_average, result_min=NULL, result_max=NULL, save.file=FALSE, ... ){
independent.var.value<-enquo(independent.var.value)
dependent.var.value<-enquo(dependent.var.value)
result_average<-enquo(result_percent)
result_min <- enquo(result_min)
result_max <- enquo(result_max)
# percent_formats<-function(x,digits=0){return(paste0(round(x*100,digits),"%"))}
theplot<-ggplot(.data,aes(x=!!independent.var.value,y=!!result_percent,fill=!!dependent.var.value))+geom_bar(stat = "identity",position='dodge')+theme_tufte()+xlab(NULL)+ylab(NULL)+theme(text=element_text(family="Arial Narrow"))+
scale_fill_reach_categorical(n=nrow(distinct(.data,!!dependent.var.value)),name="")+
scale_y_continuous(limits = c(0,100),labels = scales::percent_format(scale=1,accuracy = 0.01))
# +geom_errorbar( aes(x=!!independent.var.value,
#                        ymin=as.numeric(!!result_min),
#                        ymax=as.numeric(!!result_max)),
#                    position=position_dodge(width=0.9),
#                    stat='identity',
#                    width=.1)+ theme(axis.text.x = element_text(angle = 45, hjust = 1))
return(theplot)
}
thplot <-fun(table_result_percent, region, choice, percents, min, max)
thplot
fun <- function(.data,independent.var.value,dependent.var.value,result_average, result_min=NULL, result_max=NULL, save.file=FALSE, ... ){
independent.var.value<-enquo(independent.var.value)
dependent.var.value<-enquo(dependent.var.value)
result_average<-enquo(result_percent)
result_min <- enquo(result_min)
result_max <- enquo(result_max)
# percent_formats<-function(x,digits=0){return(paste0(round(x*100,digits),"%"))}
theplot<-ggplot(.data,aes(x=!!independent.var.value,y=!!result_percent,fill=!!dependent.var.value))+geom_bar(stat = "identity",position='dodge')+theme_tufte()+xlab(NULL)+ylab(NULL)+theme(text=element_text(family="Arial Narrow"))+
scale_fill_reach_categorical(n=nrow(distinct(.data,!!dependent.var.value)),name="")+
scale_y_continuous(limits = c(0,100),labels = scales::percent_format(scale=1,accuracy = 0.001))
# +geom_errorbar( aes(x=!!independent.var.value,
#                        ymin=as.numeric(!!result_min),
#                        ymax=as.numeric(!!result_max)),
#                    position=position_dodge(width=0.9),
#                    stat='identity',
#                    width=.1)+ theme(axis.text.x = element_text(angle = 45, hjust = 1))
return(theplot)
}
thplot <-fun(table_result_percent, region, choice, percents, min, max)
thplot
fun <- function(.data,independent.var.value,dependent.var.value,result_average, result_min=NULL, result_max=NULL, save.file=FALSE, ... ){
independent.var.value<-enquo(independent.var.value)
dependent.var.value<-enquo(dependent.var.value)
result_average<-enquo(result_percent)
result_min <- enquo(result_min)
result_max <- enquo(result_max)
# percent_formats<-function(x,digits=0){return(paste0(round(x*100,digits),"%"))}
theplot<-ggplot(.data,aes(x=!!independent.var.value,y=!!result_percent,fill=!!dependent.var.value))+geom_bar(stat = "identity",position='dodge')+theme_tufte()+xlab(NULL)+ylab(NULL)+theme(text=element_text(family="Arial Narrow"))+
scale_fill_reach_categorical(n=nrow(distinct(.data,!!dependent.var.value)),name="")+
scale_y_continuous(limits = c(0,100),labels = scales::percent_format(scale=1,accuracy = 0.01))+geom_errorbar( aes(x=!!independent.var.value,
ymin=as.numeric(!!result_min),
ymax=as.numeric(!!result_max)),
position=position_dodge(width=0.9),
stat='identity',
width=.1)+ theme(axis.text.x = element_text(angle = 45, hjust = 1))
return(theplot)
}
thplot <-fun(table_result_percent, region, choice, percents, min, max)
thplot
who = "Eliora"
# get your todo list
todolist<-todo_download(who)
who = "Sharon"
# get your todo list
todolist<-todo_download(who)
researchcyclematrix::rcm_set_to_validated(file.id ="NGA1806c_DFID_TPM_EMOP_Data_1")
who = "Sharon"
# get your todo list
todolist<-todo_download(who)
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE,error=FALSE)
library("cleaninginspectoR")
data<-read.csv(file.choose(),header=TRUE,sep=",")
data
data<-read.csv(file.choose(),header=TRUE,sep=";")
data <- data.frame(data, index1=1:nrow(data))
all <- inspect_all(data, "index1")
kable(all)
kable(all[c(680),])
kable(all[c(1:680),])
kable(all[c(1:670),])
a<-find_outliers(data, "index1")
a<-find_outliers(data, "index1")
kable(al
kable(a)
data$GEO_District_Assessed_location
a<-find_outliers(data, "Village_Assessed_location")
a<-find_outliers(data, "Village_Assessed_location")
kable(a)
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE,error=FALSE)
library("cleaninginspectoR")
#devtools::install_github("ellieallien/cleaninginspectoR")
data<-read.csv(file.choose(),header=TRUE,sep=";", stringsAsFactors = F)
a<-inspect_all(data,"Community.Neighbourhood.Camp.Informal.settlement.p.code")
kable(a)
knitr::opts_chunk$set(echo = TRUE)
library("researchcyclematrix")
rcm<- researchcyclematrix::rcm_download()
who = "Sharon"
# get your todo list
todolist<-todo_download(who)
# ... once your validation is over set to validated (and update todolist):
todolist <- todo_validate_next(todolist)
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE,error=FALSE)
install.packages("reachR")
library(reachR)
library("reachR")
install.packages("reachR")
install.packages(reachR)
install.packages("reachR")
# check if package is installed
.is.package.installed<-function(package.name){
package.name %in% installed.packages()[,"Package"]
}
#  install dependencies if missing
.install_dependencies<-function(packages.to.install){
new.packages <- packages.to.install[!.is.package.installed(packages.to.install)]
if(length(new.packages)) install.packages(new.packages)
return(packages.to.install)
}
# install reachR
.install_reachR<-function(reinstall_if_exists = F){
if(!.is.package.installed("reachR") | reinstall_if_exists){
# get devtools if needed
if(!.is.package.installed("devtools")){install.packages("devtools")}
require("devtools")
install_github("mabafaba/reachR",ref = "master",force=T)
# unload devtools
detach("package:devtools", unload=TRUE)
if(reinstall_if_exists){
warning("Please restart R session to update reachR documentation")
}
}
}
# load dependencies
.load_dependencies<- function(dependencies){
sapply(dependencies, require, character.only = TRUE)
return(dependencies)
}
.dependencies<-c("dplyr","ggplot2","ggthemes","reshape2","data.table","plyr","tidyr")
.install_dependencies(.dependencies)
.install_reachR(reinstall_if_exists = F)
.install_reachR(reinstall_if_exists = F)
.load_dependencies(c(.dependencies,"reachR"))
dependencies_spatial<-c("rgdal","raster","RgoogleMaps","ggmap","gstat","maptools","rgeos")
dependencies_spatial %>% .install_dependencies %>% .load_dependencies
# check if package is installed
.is.package.installed<-function(package.name){
package.name %in% installed.packages()[,"Package"]
}
#  install dependencies if missing
.install_dependencies<-function(packages.to.install){
new.packages <- packages.to.install[!.is.package.installed(packages.to.install)]
if(length(new.packages)) install.packages(new.packages)
return(packages.to.install)
}
# install reachR
.install_reachR<-function(reinstall_if_exists = F){
if(!.is.package.installed("reachR") | reinstall_if_exists){
# get devtools if needed
if(!.is.package.installed("devtools")){install.packages("devtools")}
require("devtools")
install_github("mabafaba/reachR",ref = "master",force=T)
# unload devtools
detach("package:devtools", unload=TRUE)
if(reinstall_if_exists){
warning("Please restart R session to update reachR documentation")
}
}
}
# load dependencies
.load_dependencies<- function(dependencies){
sapply(dependencies, require, character.only = TRUE)
return(dependencies)
}
.dependencies<-c("dplyr","ggplot2","ggthemes","reshape2","data.table","plyr","tidyr")
.install_dependencies(.dependencies)
.install_reachR(reinstall_if_exists = F)
.load_dependencies(c(.dependencies,"reachR"))
library("cleaninginspectoR")
data<-read.csv(file.choose(),header=TRUE,sep=";")
a<-inspect_all(data,uuid.column.name = "X_uuid")
kable(a)
a<-inspect_all(data,uuid.column.name = "X_uuid")
a<-find_duplicates(data,uuid.column.name = "X_uuid")
a<-find_duplicates(data,"X_uuid")
duplicate<-find_duplicates(data,"X_uuid")
outliers <- find_outliers(data,"X_uuid")
other_response <- find_other_responses(data)
kable(outliers)
kable(outliers[c(11,12),])
kable(outliers[c(11:154),])
kable(outliers[c(11,12, 69, 102),])
# install reachR
.install_reachR<-function(reinstall_if_exists = F){
if(!.is.package.installed("reachR") | reinstall_if_exists){
# get devtools if needed
if(!.is.package.installed("devtools")){install.packages("devtools")}
require("devtools")
install_github("mabafaba/reachR",ref = "master",force=T)
# unload devtools
detach("package:devtools", unload=TRUE)
if(reinstall_if_exists){
warning("Please restart R session to update reachR documentation")
}
}
}
.install_reachR(reinstall_if_exists = F)
knitr::opts_chunk$set(echo = TRUE)
library("cleaninginspectoR")
library("cleaninginspectoR")
data<-read.csv(file.choose(),header=TRUE,sep=",")
data<-read.csv(file.choose(),header=TRUE,sep=";")
all <- inspect_all(data)
data <- data.frame(data, indexx=1:nrow(data))
all <- inspect_all(data, "indexx")
outliers <- find_outliers(data , "indexx")
other_res <- find_other_responses(data)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("visualisationIMPACT")
library(magrittr)
library("ggthemes")
library("rlang")
library(extrafont)
data<-read.csv("../tests/testthat/testdata.csv")
```{r, results='hide', message=FALSE,warning=FALSE,error=FALSE}
library("visualisationIMPACT")
library(magrittr)
library("ggthemes")
library("rlang")
library(extrafont)
data<-read.csv("../tests/testthat/testdata.csv")
regions.value=c("capitalcentral", "north","south","west")
median_value=c(20,50,100,30)
first_quantile <- c(5,30,90, 10)
third_quantile <- c(30,70, 130,50)
min_value <- c(5,30,90, 10) - 1.5
max_value <- c(30,70, 130,50) + 50
result_box <- data.frame(region=regions.value, median=median_value, min= min_value, max = max_value, first_quantile = first_quantile, third_quantile = third_quantile,outlier_min = outlier_min, outlier_max=outlier_max )
outlier_min <- c(1,NA,70, 5)
outlier_max <- c(NA,150, 200,120)
result_box <- data.frame(region=regions.value, median=median_value, min= min_value, max = max_value, first_quantile = first_quantile, third_quantile = third_quantile,outlier_min = outlier_min, outlier_max=outlier_max )
regions.value=c("capitalcentral", "north","south","west")
median_value=c(20,50,100,30)
first_quantile <- c(5,30,90, 10)
third_quantile <- c(30,70, 130,50)
min_value <- c(5,30,90, 10) - 1.5
max_value <- c(30,70, 130,50) + 50
outliers_min <- c(1,NA,70, 5)
outliers_max <- c(NA,150, 200,120)
result_box <- data.frame(region=regions.value, median=median_value, min= min_value, max = max_value, first_quantile = first_quantile, third_quantile = third_quantile,outlier_min = outliers_min, outlier_max=outliers_max )
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, outlier_min, outlier_max)
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, outlier_min, outlier_max)
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, outlier_min, outlier_max)
!(is.null(outlier_min)
#' @param .data: dataframe that contains the result for the barchart
#' @param independent.var.value: column of the dataframe .data thta contains the different values of the categorical data
#' @param result_average: a column of the dataframe .data containing for each categorical value the average associated
#' @param result_min optional: a column of the dataframe .data containing for each categorical value the lower limit value for the error bars
#' @param result_max optional: a column of the dataframe .data containing for each categorical value the upper limit value for the error bars
#' @param resultat_avarage: data.frame of two column where the first is the values of the independent var and the second column is the average associated to the indepedent variable value
#' @details Searches for ....
#' @return a ggplot object
#' @examples  ...
#' @export
boxplot_impact <- function(.data, independent.var, dependent.var, median, min, max, first_quantile, third_quantile, outlier_min = NULL, outlier_max = NULL, sens.barchart = "vertical"){
independent.var <- enquo(independent.var)
median <- enquo(median)
first_quantile <- enquo(first_quantile)
third_quantile <- enquo(third_quantile)
min <- enquo(min)
max <- enquo(max)
outlier_min <- enquo(outlier_min)
outlier_max <- enquo(outlier_max)
theplot <- ggplot(.data, aes(1)) + geom_boxplot(aes( x = !!independent.var,
lower = !!first_quantile,
upper = !!third_quantile,
middle = !!median,
ymin = !!min,
ymax = !!max ) ,stat = "identity")
if(!(is.null(outlier_min))){
}
geom_point(aes(x = !!independent.var, y=!!outlier_min)) +
geom_point(aes(x = !!independent.var, y=!!outlier_max))
# +    geom_point(.data,aes(x = !!independent.var, y=!!outlier))
return(theplot)
}
outlier_min = NULL
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, outlier_min, outlier_max)
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, outlier_max)
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile)
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, outlier_min)
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile)
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "horizontal")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
theplot <- ggplot(.data, aes(1)) + geom_boxplot(aes( x = !!independent.var,
lower = !!first_quantile,
upper = !!third_quantile,
middle = !!median,
ymin = !!min,
ymax = !!max ) ,stat = "identity") +
if(rlang::quo_is_null(outlier_min) == FALSE){
theplot <- theplot + geom_point(aes(x = !!independent.var, y=!!outlier_min))
}
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "horizontal")
devtools::document()
setwd("~/GitHub/visualisationIMPACT")
devtools::document()
devtools::build()
devtools::load_all()
devtools::install()
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "horizontal")
library("visualisationIMPACT")
library(magrittr)
library("ggthemes")
library("rlang")
library(extrafont)
extrafont::loadfonts(device="win")  ##to compile before showing graph
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "horizontal")
#' @param independent.var.value
#' @param dependent.var.value
#' @param result_percent: data.frame of two column where the first is the values of the independent var and the second column is the average associated to the indepedent variable value
#' @param result_min optional:
#' @param result_max optional:
#' @param save.file optional:
#' @param ... Other arguments passed on to the ggsave function
#' @details
#' @return
#' @examples
theme_impact <- function(){
family_font <- windowsFonts(Times=windowsFont("Arial Narrow"))
style <- theme(text=element_text(family=family_font$Times, colour='black'))
style <- style + theme(plot.title = element_text(family = family_font$Times,
colour = 'red',
size = 18,
face = 'bold',
hjust = 0.5  ))
return(style)
}
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "horizontal")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "horizontal")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "horizontal")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "horizontal")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "horizontal")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "horizontal")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "horizontal")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "horizontal")
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
knitr::opts_chunk$set(echo = TRUE)
who = "Sharon"
library("researchcyclematrix")
library(dplyr)
rcm<- researchcyclematrix::rcm_download()
who = "Sharon"
# get your todo list
todolist<-todo_download(who)
who = "Eliora"
# get your todo list
todolist<-todo_download(who)
who = "Martin"
# get your todo list
todolist<-todo_download(who)
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
#' reach brand light greys
#'
#'
#'
reach_style_color_lightgrey<-function(lightness=1){
if      (lightness==1){rgb(209/255,211/255,212/255)}
else if (lightness==2){rgb(209/255,211/255,212/255,0.5)}
else if (lightness==3){rgb(209/255,211/255,212/255,0.3)}
}
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
#' Reach brand reds
#'
reach_style_color_red<-function(lightness=1){
if      (lightness==1){rgb(238/255,88/255,89/255)}
else if (lightness==2){rgb(238/255,88/255,89/255,0.5)}
else if (lightness==3){rgb(238/255,88/255,89/255,0.3)}
}
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, sens.boxplot = "vertical")
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, outlier_min, outlier_max sens.boxplot = "vertical")
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, outlier_min, outlier_max, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, outlier_min, outlier_max, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, outlier_min, outlier_max, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, outlier_min, outlier_max, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, outlier_min, outlier_max, sens.boxplot = "vertical")
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, outlier_min, outlier_max, sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/impact_style.R')
source('~/GitHub/visualisationIMPACT/R/impact_style.R')
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, outlier_min, outlier_max, sens.boxplot = "vertical")
#' Reach brand dark greys
#'
#'
#'
reach_style_color_darkgrey<-function(lightness=1){
if      (lightness==1){rgb(88/255,88/255,90/255)}
else if (lightness==2){rgb(88/255,88/255,90/255,0.5)}
else if (lightness==3){rgb(88/255,88/255,90/255,0.3)}
}
boxplot_impact(result_box, region, "cashincome", median, min, max, first_quantile, third_quantile, outlier_min, outlier_max, sens.boxplot = "vertical")
