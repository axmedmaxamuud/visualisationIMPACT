source('~/GitHub/visualisationIMPACT/R/utilities.R')
source('~/GitHub/visualisationIMPACT/R/impact_style.R')
source('~/GitHub/visualisationIMPACT/R/scale_plot.R')
source('~/GitHub/visualisationIMPACT/R/scale_plot.R')
source('~/GitHub/visualisationIMPACT/R/checking_utilities.R')
source('~/GitHub/visualisationIMPACT/R/checking_utilities.R')
library("visualisationIMPACT")
library(magrittr)
library("ggthemes")
library("rlang")
library(extrafont)
data<-read.csv("../tests/testthat/testdata.csv")
dependent.var = "hhnumberindividuals"
independent.var = "region"
result <- data %>% dplyr::select(c( independent.var , dependent.var)) %>% dplyr::group_by_(independent.var) %>% dplyr::summarise_all(c(average=mean,min=min,max=max))
extrafont::loadfonts(device="win")
sens <- orientation_plot(result, region, 10, 10)
result$min <- c(2,2,5,3,NA,3,3)
plottest <- barchart_impact(.data = result, x = region, y = average, infimum_error = min, supremum_error = max, sens.barchart = sens, percent = FALSE)
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
sens <- orientation_plot(result, region, 10, 10)
result$min <- c(2,2,5,3,NA,3,3)
plottest <- barchart_impact(.data = result, x = region, y = average, infimum_error = min, supremum_error = max, sens.barchart = sens, percent = FALSE)
ggsave(filename = "test.jpg", plot = last_plot(), width = 6, height = 4, units = "cm")
barchart_impact(.data = result, x = region, y = average, infimum_error = min, supremum_error = max, sens.barchart = sens, percent = FALSE)
debug(barchart_impact)
barchart_impact(.data = result, x = region, y = average, infimum_error = min, supremum_error = max, sens.barchart = sens, percent = FALSE)
x <- enquo(x)
y<-enquo(y)
infimum_error <- enquo(infimum_error)
supremum_error<-enquo(supremum_error)
# Check and return message if empty evironnement
stop_msg <- error_message_empty_env_barchart( x,subset.x = NULL, y, infimum_error, supremum_error)
if(stop_msg != ""){
stop(paste0("The variable(s) following does not exist in .data: ",stop_msg))
}
if(sens.barchart != "vertical" & sens.barchart != "horizontal"){
stop("Please enter a valid value to the parameter sens.barchart: 'vertical' or 'horizontal'")
}
if(!is.logical(percent)){
stop("Please enter a valid value to the parameter percent: TRUE or FALSE")
}
# No percentages > 100
if(percent == TRUE & TRUE %in% (rlang::eval_tidy(y,.data)*scale.percent > 100) ){
stop("One of the percentages given is greater than 100 %. Please enter valid numbers.")
}
#Scale percentages can be either 1 or 100
if(scale.percent != 1 & scale.percent != 100){
stop("Parameter scale.percent is not value. Has to be egal to 1 or 100")
}
nbre_bar <- length(unique(rlang::eval_tidy(x,.data)))
if(nbre_bar > 20){
warning("Too many variables. It is not going to fit correclty into the plot.")
}
if(size.plot != "smallFS"){
stop("Please enter a valid value to the parameter size.plot: 'smallFS' .")
}
#No plot if y is NA
check_contains_only_NA(x,.data)
check_contains_only_NA(y,.data)
theplot <-  ggplot(.data, aes(x = !!x , y = (!!y)*scale.percent )) + geom_bar_impact( fill = reach_style_color_red() ) +
xlab("") + ylab(rlang::get_expr(y)) + theme_impact() + theme_bar()
if(sens.barchart == "horizontal"){
theplot <- theplot + coord_flip() + theme(axis.text.x = element_text(angle=0))
}
if (rlang::quo_is_null(infimum_error) | rlang::quo_is_null(supremum_error)) {
warning("Could not find the min or max column. No error bars will be added to the barchart")
}
# Add error bar to the plot
infimum_error_without_negative <- check_and_replace_negative_value(.data, infimum_error)
supremum_error_without_negative <- check_and_replace_negative_value(.data,supremum_error)
theplot <- theplot + geom_errorbar_impact(aes( x= !!x,
ymin = as.numeric(infimum_error_without_negative),
ymax = as.numeric(supremum_error_without_negative)))
theplot <- theplot + scale_y_percent_impact()
return(theplot)
sens <- orientation_plot(result, region, 10, 10)
result$min <- c(2,2,5,3,NA,3,3)
barchart_impact(.data = result, x = region, y = average, infimum_error = min, supremum_error = max, sens.barchart = sens, percent = FALSE)
ggsave(filename = "test.jpg", plot = last_plot(), width = 6, height = 4, units = "cm")
undebug(barchart_impact)
sens <- orientation_plot(result, region, 10, 10)
result$min <- c(2,2,5,3,NA,3,3)
barchart_impact(.data = result, x = region, y = average, infimum_error = min, supremum_error = max, sens.barchart = sens, percent = FALSE)
source('~/GitHub/visualisationIMPACT/R/checking_utilities.R')
sens <- orientation_plot(result, region, 10, 10)
result$min <- c(2,2,5,3,NA,3,3)
barchart_impact(.data = result, x = region, y = average, infimum_error = min, supremum_error = max, sens.barchart = sens, percent = FALSE)
debug(barchart_impact)
barchart_impact(.data = result, x = region, y = average, infimum_error = min, supremum_error = max, sens.barchart = sens, percent = FALSE)
x <- enquo(x)
y<-enquo(y)
infimum_error <- enquo(infimum_error)
supremum_error<-enquo(supremum_error)
# Check and return message if empty evironnement
stop_msg <- error_message_empty_env_barchart( x,subset.x = NULL, y, infimum_error, supremum_error)
if(stop_msg != ""){
stop(paste0("The variable(s) following does not exist in .data: ",stop_msg))
}
if(sens.barchart != "vertical" & sens.barchart != "horizontal"){
stop("Please enter a valid value to the parameter sens.barchart: 'vertical' or 'horizontal'")
}
if(!is.logical(percent)){
stop("Please enter a valid value to the parameter percent: TRUE or FALSE")
}
# No percentages > 100
if(percent == TRUE & TRUE %in% (rlang::eval_tidy(y,.data)*scale.percent > 100) ){
stop("One of the percentages given is greater than 100 %. Please enter valid numbers.")
}
#Scale percentages can be either 1 or 100
if(scale.percent != 1 & scale.percent != 100){
stop("Parameter scale.percent is not value. Has to be egal to 1 or 100")
}
nbre_bar <- length(unique(rlang::eval_tidy(x,.data)))
if(nbre_bar > 20){
warning("Too many variables. It is not going to fit correclty into the plot.")
}
if(size.plot != "smallFS"){
stop("Please enter a valid value to the parameter size.plot: 'smallFS' .")
}
#No plot if y is NA
check_contains_only_NA(x,.data)
check_contains_only_NA(y,.data)
theplot <-  ggplot(.data, aes(x = !!x , y = (!!y)*scale.percent )) + geom_bar_impact( fill = reach_style_color_red() ) +
xlab("") + ylab(rlang::get_expr(y)) + theme_impact() + theme_bar()
if(sens.barchart == "horizontal"){
theplot <- theplot + coord_flip() + theme(axis.text.x = element_text(angle=0))
}
# Add error bar to the plot
infimum_error_without_negative <- check_and_replace_negative_value(.data, infimum_error)
debug(check_and_replace_negative_value)
# Add error bar to the plot
infimum_error_without_negative <- check_and_replace_negative_value(.data, infimum_error)
if(all(is.na(rlang::eval_tidy(var,.data)))){
stop(paste(var, "varible contains only NAs"))
}
newlist <-  lapply(rlang::eval_tidy(var, .data), function(x){
if(x < 0) {x = 0}
else {
x = x
}})
newlist <-  lapply(rlang::eval_tidy(var, .data), function(x){
if((is.null(x)) | (is.na(x))){x <- NULL}else{
if(x < 0) {x = 0}
else {
x = x
}}})
rlang::eval_tidy(var, .data)
is.null(rlang::eval_tidy(var, .data))
is.na(rlang::eval_tidy(var, .data))
is.na(rlang::eval_tidy(var, .data)[5])
is.null(rlang::eval_tidy(var, .data)[5])
rlang::eval_tidy(var, .data)[5] <- NULL
rlang::eval_tidy(var, .data)[5] <- NA
rlang::eval_tidy(var, .data)[5] <- NA
newlist <-  lapply(rlang::eval_tidy(var, .data), function(x){
if((is.null(x)) | (is.na(x))){x <- NA}else{
if(x < 0) {x = 0}
else {
x = x
}}})
newlist
newlist <-  lapply(rlang::eval_tidy(var, .data), function(x){
if((is.null(x)) | (is.na(x))){x <- NULL}else{
if(x < 0) {x = 0}
else {
x = x
}}})
newlist
source('~/GitHub/visualisationIMPACT/R/checking_utilities.R')
undebug(barchart_impact)
undebug(check_and_replace_negative_value)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("visualisationIMPACT")
library(magrittr)
library("ggthemes")
library("rlang")
library(extrafont)
source('~/GitHub/visualisationIMPACT/R/utilities.R')
source('~/GitHub/visualisationIMPACT/R/boxplot_functions.R')
source('~/GitHub/visualisationIMPACT/R/regression_plot.R')
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
source('~/GitHub/visualisationIMPACT/R/impact_style.R')
source('~/GitHub/visualisationIMPACT/R/scale_plot.R')
source('~/GitHub/visualisationIMPACT/R/reach_color.R')
data<-read.csv("../tests/testthat/testdata.csv")
dependent.var = "hhnumberindividuals"
independent.var = "region"
result <- data %>% dplyr::select(c( independent.var , dependent.var)) %>% dplyr::group_by_(independent.var) %>% dplyr::summarise_all(c(average=mean,min=min,max=max))
extrafont::loadfonts(device="win")
sens <- orientation_plot(result, region, 10, 10)
source('~/GitHub/visualisationIMPACT/R/scale_plot.R')
source('~/GitHub/visualisationIMPACT/R/checking_utilities.R')
sens <- orientation_plot(result, region, 10, 10)
result$min <- c(2,2,5,3,NA,3,3)
barchart_impact(.data = result, x = region, y = average, infimum_error = min, supremum_error = max, sens.barchart = sens, percent = FALSE)
ggsave(filename = "test.jpg", plot = last_plot(), width = 6, height = 4, units = "cm")
result$average <- c(0.5,0.50, 0.30, 0.70, 0.3, 0.8, 0.1)
theplot <- barchart_impact(.data = result, x = region, y = average, sens.barchart = "horizontal", percent = TRUE, scale.percent = 100)
theplot
result$average <- c(200, 50,40,30, 10,5,40)
testthat::expect_error(barchart_impact(.data = result, x = region, y = average, infimum_error = min, supremum_error = max, sens.barchart = sens, percent = TRUE, scale.percent = 100))
result$average <- c(200, 50,40,30, 10,5,40)
testthat::expect_error(barchart_impact(.data = result, x = region, y = average, infimum_error = min, supremum_error = max, sens.barchart = sens, percent = TRUE, scale.percent = 100))
regions.value=c("capitalcentral","capitalcentral", "north","north","south","south","west","west")
choices_value=c("yes","no","yes","no","yes","no","yes","no")
result_percent= c(0.5,0.50, 0.30, 0.70, 0.45,0.55, 0.90,0.10)
min_value <- result_percent-5
max_value <- result_percent+5
table_result <- data.frame(region=regions.value, choice=choices_value, percents=result_percent, infimum_error=min_value, supremum_error=max_value)
grouped_barchart_impact(table_result, region , choice , percents, infimum_error, supremum_error, sens.barchart="vertical", percent = TRUE, scale.percent = 1 ) + scale_y_continuous(limits = c(0,7))
regions.value=c("capitalcentral","capitalcentral","capitalcentral","north", "north","north","south","south","south","west","west","west")
choices_value=c("yes","no", "bb","yes","no", "bb","yes","no","bb","yes","no","bb")
result_percent=c(40,50,100,30,200,30,50,70, 20,50, 60, 70 )
min_value <- result_percent - 10
max_value <-result_percent + 20
table_result <- data.frame(region=regions.value, choice=choices_value, percents=result_percent, infimum_error=min_value, supremum_error=max_value)
theplot <- grouped_barchart_impact(table_result, region , choice , percents, infimum_error, supremum_error, sens.barchart="horizontal", percent = FALSE )
theplot
regions.value="capitalcentral"
median_value=20
first_quantile <- 5
third_quantile <- 30
min_value <- 2.5
max_value <- 80
outliers_min <- 1
outliers_max <- NA
result_box <- data.frame(region=regions.value, median=median_value, min= min_value, max = max_value, first_quantile = first_quantile, third_quantile = third_quantile,outlier_min = outliers_min, outlier_max=outliers_max )
theplot <- boxplot_impact(result_box, region, "cashincome", median, first_quantile, third_quantile, min, max,outlier_min, outlier_max, sens.boxplot = "vertical")
theplot + ggplot2::scale_y_continuous(limits=c(-100,100))
for(i in 1:4){
data <- output$results[[i]]$summary.statistic
sens <- orientation_plot(.data = data, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
plot<- grouped_barchart_impact(data,x = dependent.var.value, subset.x = independent.var.value , y = numbers, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = TRUE, scale.percent = 100)
ggsave(paste0(as.character(i),"plot.jpg"))
}
output <- readRDS("../tests/testthat/output_hypegrammaR.RDS")
vec = 1:29
output$results[[5]]$parameters$case
for(i in 1:4){
data <- output$results[[i]]$summary.statistic
sens <- orientation_plot(.data = data, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
plot<- grouped_barchart_impact(data,x = dependent.var.value, subset.x = independent.var.value , y = numbers, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = TRUE, scale.percent = 100)
ggsave(paste0(as.character(i),"plot.jpg"))
}
for(i in c(5:8,20:25)){
data <- output$results[[i]]$summary.statistic
sens <- orientation_plot(.data = data, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
plot<- barchart_impact(data,x = independent.var.value , y = numbers, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = FALSE)
ggsave(paste0(as.character(i),"plot.jpg"))
}
i=13
data <- output$results[[i]]$summary.statistic
sens <- orientation_plot(.data = data, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
testthat::expect_error(plot<- barchart_impact(data,x = dependent.var.value , y = numbers, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = FALSE))
for(i in c(14:19,26,29)){
data <- output$results[[i]]$summary.statistic
sens <- orientation_plot(.data = data, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
plot<- barchart_impact(data,x = dependent.var.value , y = numbers, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = FALSE)
ggsave(paste0(as.character(i),"plot.pdf"))
}
theplot$scales$get_scales
# i= 12 contains NA
for(i in c(9:11,27,28)){
data <- output$results[[i]]$summary.statistic
sens <- orientation_plot(.data = data, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
plot<- barchart_impact(data,x = dependent.var.value , y = numbers, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = FALSE)
ggsave(paste0(as.character(i),"plot.jpg"))
}
knitr::opts_chunk$set(echo = TRUE)
library(remotes)
install_github("mabafaba/composr")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",echo = TRUE
)
library(composr)
library(dplyr)
df<-data.frame(select_one_letters=sample(letters,500,T),
some_numbers=runif(500)*20,
id=1:500,
select_multiple_letters = sapply(1:500,function(x){
sample(LETTERS,round(runif(1,min = 1,max = 10)),T) %>% paste(collapse=" ")
}))
df<-lapply(df,function(x){x[sample(1:length(x), 100)]<-NA; x}) %>% as_tibble
View(df)
View(df)
df
knitr::kable(head(df))
library(composr)
library(dplyr)
library(composr)
library(dplyr)
df %>%
new_recoding(source = some_numbers,
target = number_size)
df %>%
new_recoding(source = some_numbers,
target = number_size)
df %>%
new_recoding(source = some_numbers,
target = number_size) %>%
recode_to("big number", where.num.larger = 10)
df %>%
new_recoding(source = some_numbers,
target = number_size) %>%
recode_to("big number",
where.num.larger = 10) %>%
recode_to("small number",
where.num.smaller.equal = 10)
df %>%
new_recoding(source = some_numbers,
target = "number_size") %>%
recode_to("big number",
where.num.larger = 10) %>%
recode_to("small number",
where.num.smaller.equal = 10) %>%
end_recoding()
df %>%
new_recoding(target = number_size, source = some_numbers) %>%
recode_to("gigantic",where.num.larger.equal = 15) %>%
recode_to("large", where.num.smaller = 15) %>%
recode_to("medium", where.num.smaller = 10) %>%
recode_to("small", where.num.smaller = 5) %>%
recode_to("tiny", where.num.smaller = 2) %>%
end_recoding()
df %>%
new_recoding(target = number_size, source = some_numbers) %>%
recode_to("gigantic",where.num.larger.equal = 15) %>%
recode_to("large", where.num.smaller = 15) %>%
recode_to("medium", where.num.smaller = 10) %>%
recode_to("small", where.num.smaller = 5) %>%
recode_to("tiny", where.num.smaller = 2) %>%
end_recoding()
df %>%
new_recoding(target = "number_size",
source = some_numbers
) %>%
recode_to("big number",
where.num.larger = 10,
otherwise.to = "small number",
na.to = "COULD BE ANYTHING!") %>%
end_recoding()
df %>%
new_recoding(target = letter_combos,
source = select_multiple_letters) %>%
recode_to("at least one of A, B and C",
where.selected.any = c("A","B","C")) %>%
recode_to("all of A, B and C",
where.selected.all = c("A","B","C")) %>%
recode_to("none from A, B or C selected",
where.selected.none = c("A","B","C")) %>%
recode_to("exactly A, B and C (and nothing else) selected",
where.selected.exactly = c("A","B")) %>%
end_recoding()
# creating a "fake" kobo questionnaire:
select_one_lower_letters_relevant <-
"( ${some_numbers} < 3 )"
questions<-data.frame(name = c("select_one_letters", "some_numbers", "select_multiple_letters"),
type = c("select_one lower_letters","integer","select_multiple upper_letters"),
relevant=c(select_one_lower_letters_relevant,"",""),stringsAsFactors = F)
choices<-data.frame("list_name" = rep("lower_letters",length(letters)),
name=letters, label = paste("letter:",letters))
# creating a "fake" kobo questionnaire:
select_one_lower_letters_relevant <-
"( ${some_numbers} < 3 )"
questions<-data.frame(name = c("select_one_letters", "some_numbers", "select_multiple_letters"),
type = c("select_one lower_letters","integer","select_multiple upper_letters"),
relevant=c(select_one_lower_letters_relevant,"",""),stringsAsFactors = F)
choices<-data.frame("list_name" = rep("lower_letters",length(letters)),
name=letters, label = paste("letter:",letters))
questions
knitr::kable(questions)
choices
knitr::kable(head(choices))
my_questionnaire <- koboquest::load_questionnaire(data = df,
questions = questions,
choices = choices)
df %>% new_recoding(target = new_variable,
source = select_one_letters) %>%
recode_to("first half of alphabet",
where.selected.any = letters[1:13],
otherwise.to = "second half of alphabet",
skipped.to = "this one was skipped",
questionnaire = my_questionnaire)
my_questionnaire <- koboquest::load_questionnaire(data = df,
questions = questions,
choices = choices)
knitr::kable(head(choices))
my_questionnaire <- koboquest::load_questionnaire(data = df,
questions = questions,
choices = choices)
debug(load_questionnaire)
library(koboquest)
my_questionnaire <- koboquest::load_questionnaire(data = df,
questions = questions,
choices = choices)
debug(koboquest::load_questionnaire)
my_questionnaire <- koboquest::load_questionnaire(data = df,
questions = questions,
choices = choices)
my_questionnaire <- koboquest::load_questionnaire(data = df,
questions = questions,
choices = choices)
my_questionnaire <- koboquest::load_questionnaire(data = df,
questions = questions,
choices = choices)
df %>% new_recoding(target = new_variable,
source = select_one_letters) %>%
recode_to("first half of alphabet",
where.selected.any = letters[1:13],
otherwise.to = "second half of alphabet",
skipped.to = "this one was skipped",
questionnaire = my_questionnaire)
choices <- read.csv(file.choose())
choices <- read.csv(file.choose())
df <- read.csv(file.choose())
questions <- read.csv(file.choose())
my_questionnaire <- koboquest::load_questionnaire(data = df,
questions = questions,
choices = choices)
View(questions)
View(questions)
choices <- read.csv(file.choose(), sep = ";")
questions <- read.csv(file.choose(), sep = ";")
df <- read.csv(file.choose())
my_questionnaire <- koboquest::load_questionnaire(data = df,
questions = questions,
choices = choices)
choices <- read.csv(file.choose(), sep = ";")
df <- read.csv(file.choose())
questions <- read.csv(file.choose(), sep = ";")
my_questionnaire <- koboquest::load_questionnaire(data = df,
questions = questions,
choices = choices)
my_questionnaire <- koboquest::load_questionnaire(data = df,
questions = questions,
choices = choices)
my_questionnaire <- koboquest::load_questionnaire(data = df,
questions = questions,
choices = choices)
my_questionnaire <- koboquest::load_questionnaire(data = df,
questions = questions,
choices = choices)
koboquest::load_questionnaire
my_questionnaire <- koboquest::load_questionnaire(data = df,
questions = questions,
choices = choices)
df %>% new_recoding(target = new_variable,
source = select_one_letters) %>%
recode_to("first half of alphabet",
where.selected.any = letters[1:13],
otherwise.to = "second half of alphabet",
skipped.to = "this one was skipped",
questionnaire = my_questionnaire)
choices <- "choice.csv"
df <- read.csv(file.choose())
questions <- "question.csv"
setwd("~/")
my_questionnaire <- koboquest::load_questionnaire(data = df,
questions = questions,
choices = choices)
setwd("~/")
choices <- "./choice.csv"
questions <- "./question.csv"
my_questionnaire <- koboquest::load_questionnaire(data = df,
questions = questions,
choices = choices)
debug(koboquest::load_questionnaire)
my_questionnaire <- koboquest::load_questionnaire(data = df,
questions = questions,
choices = choices)
```{r}
my_questionnaire <- koboquest::load_questionnaire(data = df,
questions = questions,
choices = choices)
my_questionnaire <- koboquest::load_questionnaire(data = df,
questions = questions,
choices = choices,
choices.label.column.to.use="Label::English)
my_questionnaire <- koboquest::load_questionnaire( df,
questions = questions,
choices = choices,
choices.label.column.to.use="Label::English)
my_questionnaire <- koboquest::load_questionnaire( df,questions = questions, choices = choices, choices.label.column.to.use="Label::English)
my_questionnaire <- koboquest::load_questionnaire(df,questions = questions, choices = choices, choices.label.column.to.use="Label::English)
my_questionnaire <- koboquest::load_questionnaire(df,questions = questions, choices = choices, choices.label.column.to.use="Label::English")
undebug(koboquest::load_questionnaire)
my_questionnaire <- koboquest::load_questionnaire(df,questions = questions, choices = choices, choices.label.column.to.use="Label::English")
my_questionnaire <- koboquest::load_questionnaire(df,questions = questions, choices = choices, choices.label.column.to.use="Label..English")
my_questionnaire <- koboquest::load_questionnaire(df,questions = questions, choices = choices)
my_questionnaire <- koboquest::load_questionnaire(data = df,questions = questions, choices = choices)
my_questionnaire <- koboquest::load_questionnaire(data = df,questions = questions, choices = choices, choices.label.column.to.use = "label")
df <- read.csv(file.choose(), sep = ";")
choices <- "./choice.csv"
questions <- "./question.csv"
my_questionnaire <- koboquest::load_questionnaire(data = df,questions = questions, choices = choices, choices.label.column.to.use = "label")
my_questionnaire <- koboquest::load_questionnaire(data = df,questions = questions, choices = choices)
my_questionnaire <- koboquest::load_questionnaire(data = df,questions = questions, choices = choices, choices.label.column.to.use = "label")
df <- mtcars[, c("mpg", "cyl", "wt", "qsec", "vs", "gear")]
regression_impact(mtcars, disp, mpg, wt)
setwd("~/GitHub/visualisationIMPACT")
devtools::document()
devtools::build()
devtools::document()
devtools::load_all()
devtools::build()
devtools::install()
