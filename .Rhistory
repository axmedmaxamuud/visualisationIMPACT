detach("package:devtools", unload=TRUE)
if(reinstall_if_exists){
warning("Please restart R session to update reachR documentation")
}
}
}
# load dependencies
.load_dependencies<- function(dependencies){
sapply(dependencies, require, character.only = TRUE)
return(dependencies)
}
.dependencies<-c("dplyr","ggplot2","ggthemes","reshape2","data.table","plyr","tidyr")
.install_dependencies(.dependencies)
.install_reachR(reinstall_if_exists = F)
.load_dependencies(c(.dependencies,"reachR"))
library("cleaninginspectoR")
data<-read.csv(file.choose(),header=TRUE,sep=";")
a<-inspect_all(data,uuid.column.name = "X_uuid")
kable(a)
a<-inspect_all(data,uuid.column.name = "X_uuid")
a<-find_duplicates(data,uuid.column.name = "X_uuid")
a<-find_duplicates(data,"X_uuid")
duplicate<-find_duplicates(data,"X_uuid")
outliers <- find_outliers(data,"X_uuid")
other_response <- find_other_responses(data)
kable(outliers)
kable(outliers[c(11,12),])
kable(outliers[c(11:154),])
kable(outliers[c(11,12, 69, 102),])
# install reachR
.install_reachR<-function(reinstall_if_exists = F){
if(!.is.package.installed("reachR") | reinstall_if_exists){
# get devtools if needed
if(!.is.package.installed("devtools")){install.packages("devtools")}
require("devtools")
install_github("mabafaba/reachR",ref = "master",force=T)
# unload devtools
detach("package:devtools", unload=TRUE)
if(reinstall_if_exists){
warning("Please restart R session to update reachR documentation")
}
}
}
.install_reachR(reinstall_if_exists = F)
knitr::opts_chunk$set(echo = TRUE)
library("cleaninginspectoR")
library("cleaninginspectoR")
data<-read.csv(file.choose(),header=TRUE,sep=",")
data<-read.csv(file.choose(),header=TRUE,sep=";")
all <- inspect_all(data)
data <- data.frame(data, indexx=1:nrow(data))
all <- inspect_all(data, "indexx")
outliers <- find_outliers(data , "indexx")
other_res <- find_other_responses(data)
knitr::opts_chunk$set(echo = TRUE)
who = "Martin"
# get your todo list
todolist<-todo_download(who)
library("researchcyclematrix")
rcm<- researchcyclematrix::rcm_download()
who = "Martin"
# get your todo list
todolist<-todo_download(who)
# get your todo list
todolist<-todo_download(.)
# get your todo list
todolist<-todo_download('.')
who = "Eliora"
# get your todo list
todolist<-todo_download(who)
who = "Martin"
# get your todo list
todolist<-todo_download(who)
who = "Sharon"
# get your todo list
todolist<-todo_download(who)
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
source('~/GitHub/visualisationIMPACT/R/checking_utilities.R')
source('~/GitHub/visualisationIMPACT/R/impact_style.R')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
sens<- orientation_plot(result, region, 10, 20)
library(devtools)
devtools::build()
setwd("~/GitHub/visualisationIMPACT")
devtools::document()
devtools::build()
devtools::install()
devtools::build()
devtools::build()
devtools::build()
source('~/GitHub/visualisationIMPACT/R/scale_barchart.R')
devtools::install()
devtools::build()
devtools::document()
devtools::load_all()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
source('~/GitHub/visualisationIMPACT/R/scale_barchart.R')
source('~/GitHub/visualisationIMPACT/R/scale_barchart.R')
devtools::install()
devtools::document()
devtools::build()
devtools::load_all()
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
regions.value=c("capitalcentral","capitalcentral", "north","north","south","south","west","west")
choices_value=c("yes","no","yes","no","yes","no","yes","no")
result_percent= c(50,50, 30, 70, 45,55, 90,10)
min_value <- result_percent-5
max_value <- result_percent+5
table_result <- data.frame(region=regions.value, choice=choices_value, percents=result_percent, infimum_error=min_value, supremum_error=max_value)
grouped_barchart_impact(table_result, region , choice , percents, infimum_error, supremum_error, sens.barchart="vertical", percent = TRUE )
debug(grouped_barchart_impact)
grouped_barchart_impact(table_result, region , choice , percents, infimum_error, supremum_error, sens.barchart="vertical", percent = TRUE )
x <- enquo(x)
subset.x <- enquo(subset.x)
y <- enquo(y)
infimum_error <- enquo(infimum_error)
supremum_error <- enquo(supremum_error)
# Check and return message if empty evironnement
stop_msg <- error_message_empty_env_barchart( x, subset.x, y, infimum_error, supremum_error)
if(stop_msg != ""){
stop(paste0("The variable(s) following does not exist in .data: ",stop_msg))
}
if(sens.barchart != "vertical" & sens.barchart != "horizontal"){
stop("Please enter a valid value to the parameter sens.barchart: 'vertical' or 'horizontal'")
}
if(percent != TRUE & percent != FALSE){
stop("Please enter a valid value to the parameter percent: TRUE or FALSE")
}
# No percentages > 100
if(percent == TRUE & TRUE %in% (eval_tidy(y,.data) > 100) ){
stop("One of the percentages given is greater than 100 %. Please enter valid numbers.")
}
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
# No percentages > 100
if(percent == TRUE & TRUE %in% (rlang::eval_tidy(y,.data) > 100) ){
stop("One of the percentages given is greater than 100 %. Please enter valid numbers.")
}
# Create ggplot
theplot <- ggplot(.data,aes(x=!!x,y=!!y,fill=!!subset.x))+
geom_grouped_bar_impact(.data, subset.x)
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
grouped_barchart_impact(table_result, region , choice , percents, infimum_error, supremum_error, sens.barchart="vertical", percent = TRUE )
debug(grouped_barchart_impact)
grouped_barchart_impact(table_result, region , choice , percents, infimum_error, supremum_error, sens.barchart="vertical", percent = TRUE )
x <- enquo(x)
subset.x <- enquo(subset.x)
y <- enquo(y)
infimum_error <- enquo(infimum_error)
supremum_error <- enquo(supremum_error)
# Check and return message if empty evironnement
stop_msg <- error_message_empty_env_barchart( x, subset.x, y, infimum_error, supremum_error)
source('~/GitHub/visualisationIMPACT/R/checking_utilities.R')
grouped_barchart_impact(table_result, region , choice , percents, infimum_error, supremum_error, sens.barchart="vertical", percent = TRUE )
undebug(groupde_barchart_impact)
undebug(grouped_barchart_impact)
grouped_barchart_impact(table_result, region , choice , percents, infimum_error, supremum_error, sens.barchart="vertical", percent = TRUE )
debug(grouped_barchart_impact)
grouped_barchart_impact(table_result, region , choice , percents, infimum_error, supremum_error, sens.barchart="vertical", percent = TRUE )
x <- enquo(x)
subset.x <- enquo(subset.x)
y <- enquo(y)
infimum_error <- enquo(infimum_error)
supremum_error <- enquo(supremum_error)
# Check and return message if empty evironnement
stop_msg <- error_message_empty_env_barchart( x, subset.x, y, infimum_error, supremum_error)
if(stop_msg != ""){
stop(paste0("The variable(s) following does not exist in .data: ",stop_msg))
}
if(sens.barchart != "vertical" & sens.barchart != "horizontal"){
stop("Please enter a valid value to the parameter sens.barchart: 'vertical' or 'horizontal'")
}
if(percent != TRUE & percent != FALSE){
stop("Please enter a valid value to the parameter percent: TRUE or FALSE")
}
# No percentages > 100
if(percent == TRUE & TRUE %in% (rlang::eval_tidy(y,.data) > 100) ){
stop("One of the percentages given is greater than 100 %. Please enter valid numbers.")
}
# Create ggplot
theplot <- ggplot(.data,aes(x=!!x,y=!!y,fill=!!subset.x))+ geom_grouped_bar_impact(.data, subset.x)
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
grouped_barchart_impact(table_result, region , choice , percents, infimum_error, supremum_error, sens.barchart="vertical", percent = TRUE )
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
grouped_barchart_impact(table_result, region , choice , percents, infimum_error, supremum_error, sens.barchart="vertical", percent = FALSE )
fun <- purrr::partial(ggplot2::geom_bar, stat = "identity",position='dodge')
fun
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
geom_grouped_bar_impact <- purrr::partial(ggplot2::geom_bar, stat = "identity",position='dodge')
grouped_barchart_impact(table_result, region , choice , percents, infimum_error, supremum_error, sens.barchart="vertical", percent = FALSE )
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
grouped_barchart_impact(table_result, region , choice , percents, infimum_error, supremum_error, sens.barchart="vertical", percent = FALSE )
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
grouped_barchart_impact(table_result, region , choice , percents, infimum_error, supremum_error, sens.barchart="vertical", percent = FALSE )
lab <- function(.data,subset.x){}
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
grouped_barchart_impact(table_result, region , choice , percents, infimum_error, supremum_error, sens.barchart="vertical", percent = FALSE )
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
grouped_barchart_impact(table_result, region , choice , percents, infimum_error, supremum_error, sens.barchart="vertical", percent = FALSE )
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
grouped_barchart_impact(table_result, region , choice , percents, infimum_error, supremum_error, sens.barchart="vertical", percent = FALSE )
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
grouped_boxplot_impact(table_result, region, subsection, "cashincome", median, min, max, first_quantile, third_quantile, outliers_min , outliers_max ,sens.boxplot = "vertical")
source('~/GitHub/visualisationIMPACT/R/barchart_functions.R')
grouped_boxplot_impact(table_result, region, subsection, "cashincome", median, min, max, first_quantile, third_quantile, outliers_min , outliers_max ,sens.boxplot = "vertical")
debug(grouped_boxplot_impact)
grouped_boxplot_impact(table_result, region, subsection, "cashincome", median, min, max, first_quantile, third_quantile, outliers_min , outliers_max ,sens.boxplot = "vertical")
grouped_boxplot_impact(table_result, region, subsection, "cashincome", median, min, max, first_quantile, third_quantile, outliers_min , outliers_max ,sens.boxplot = "vertical")
x <- enquo(x)
subset.x <- enquo(subset.x)
median <- enquo(median)
first_quantile <- enquo(first_quantile)
third_quantile <- enquo(third_quantile)
whisker_min <- enquo(whisker_min)
whisker_max <- enquo(whisker_max)
outlier_min <- enquo(outlier_min)
outlier_max <- enquo(outlier_max)
stop_msg <- error_message_empty_env_boxplot( x, subset.x, median, whisker_min, whisker_max, first_quantile, third_quantile, outlier_min, outlier_max)
debug(error_message_empty_env_boxplot)
stop_msg <- error_message_empty_env_boxplot( x, subset.x, median, whisker_min, whisker_max, first_quantile, third_quantile, outlier_min, outlier_max)
# Check and return message if empty evironnement
stop_msg <- ""
if( check_empty_env(x) == TRUE){ stop_msg <- paste0(stop_msg , rlang::get_expr(x)) }
check_empty_env(x) == TRUE
rlang::is_reference(rlang::quo_get_env(x), rlang::empty_env()) == TRUE
rlang::quo_get_env(x)
rlang::empty_env()
undebug(grouped_boxplot_impact)
undebug(check_empty_env)
source('~/GitHub/visualisationIMPACT/R/checking_utilities.R')
source('~/GitHub/visualisationIMPACT/R/checking_utilities.R')
grouped_boxplot_impact(table_result, region, subsection, "cashincome", median, min, max, first_quantile, third_quantile, outliers_min , outliers_max ,sens.boxplot = "vertical")
debug(error_message_empty_env_boxplot)
grouped_boxplot_impact(table_result, region, subsection, "cashincome", median, min, max, first_quantile, third_quantile, outliers_min , outliers_max ,sens.boxplot = "vertical")
undebug(error_message_empty_env_barchart)
undebug(error_message_empty_env_boxplot)
grouped_boxplot_impact(table_result, region, subsection, "cashincome", median, min, max, first_quantile, third_quantile, outliers_min , outliers_max ,sens.boxplot = "vertical")
library("visualisationIMPACT")
data<-read.csv("../tests/testthat/testdata.csv")
library(magrittr)
library("ggthemes")
library("rlang")
library(extrafont)
dependent.var = "hhnumberindividuals"
independent.var = "region"
result <- data %>% dplyr::select(c( independent.var , dependent.var)) %>% dplyr::group_by_(independent.var) %>% dplyr::summarise_all(c(average=mean,min=min,max=max))
extrafont::loadfonts(device="win")  ##to compile before showing graph
sens<- orientation_plot(result, region, 10, 20)
barchart_impact(.data = result, x = region, y = average, infimum_error = min, supremum_error = max, sens.barchart = sens, percent = FALSE)
barchart_impact(.data = result, x = region, y = average, infimum_error = min, supremum_error = max, sens.barchart = sens, percent = TRUE)
result$average <- c(200, 50,40,30, 10,5,40)
testthat::expect_error(barchart_impact(.data = result, x = region, y = average, infimum_error = min, supremum_error = max, sens.barchart = sens, percent = TRUE))
regions.value=c("capitalcentral","capitalcentral", "north","north","south","south","west","west")
choices_value=c("yes","no","yes","no","yes","no","yes","no")
min_value <- result_percent-5
max_value <- result_percent+5
result_percent= c(50,50, 30, 70, 45,55, 90,10)
min_value <- result_percent-5
max_value <- result_percent+5
table_result <- data.frame(region=regions.value, choice=choices_value, percents=result_percent, infimum_error=min_value, supremum_error=max_value)
grouped_barchart_impact(table_result, region , choice , percents, infimum_error, supremum_error, sens.barchart="vertical", percent = TRUE )
regions.value=c("capitalcentral","capitalcentral","capitalcentral","north", "north","north","south","south","south","west","west","west")
choices_value=c("yes","no", "bb","yes","no", "bb","yes","no","bb","yes","no","bb")
result_percent=c(40,50,100,30,200,30,50,70, 20,50, 60, 70 )
min_value <- result_percent - 10
max_value <-result_percent + 20
table_result <- data.frame(region=regions.value, choice=choices_value, percents=result_percent, infimum_error=min_value, supremum_error=max_value)
grouped_barchart_impact(table_result, region , choice , percents, infimum_error, supremum_error, sens.barchart="vertical", percent = FALSE )
result_percent > 100
regions.value="capitalcentral"
median_value=20
first_quantile <- 5
third_quantile <- 30
min_value <- 2.5
max_value <- 80
outliers_min <- 1
outliers_max <- NA
result_box <- data.frame(region=regions.value, median=median_value, min= min_value, max = max_value, first_quantile = first_quantile, third_quantile = third_quantile,outlier_min = outliers_min, outlier_max=outliers_max )
theplot <- boxplot_impact(result_box, region, "cashincome", median, first_quantile, third_quantile, min, max,outlier_min, outlier_max, sens.boxplot = "vertical")
undebug(error_message_empty_env_boxplot)
undebug(error_message_empty_env_boxplot)
theplot <- boxplot_impact(result_box, region, "cashincome", median, first_quantile, third_quantile, min, max,outlier_min, outlier_max, sens.boxplot = "vertical")
theplot + ggtitle("example barchart average")
regions.value=c("capitalcentral", "north","south","west")
median_value=c(20,50,100,30)
first_quantile <- c(5,30,90, 10)
third_quantile <- c(30,70, 130,50)
min_value <- c(5,30,90, 10) - 1.5
max_value <- c(30,70, 130,50) + 50
outliers_min <- c(1,NA,70, 5)
outliers_max <- c(NA,150, 200,120)
result_box <- data.frame(region=regions.value, median=median_value, min= min_value, max = max_value, first_quantile = first_quantile, third_quantile = third_quantile,outlier_min = outliers_min, outlier_max=outliers_max )
theplot <- boxplot_impact(result_box, region, "cashincome", median, first_quantile, third_quantile, min, max,outlier_min, outlier_max, sens.boxplot = "vertical")
theplot + ggtitle("example barchart average")
regions.value=c("capitalcentral","capitalcentral", "north","north","south","south","west","west")
choices_value=c("yes","no","yes","no","yes","no","yes","no")
median_value=c(40,50,100,30,200,300,50,70 )
first_quantile <- c(20,30,90, 10,100,200,20,50)
third_quantile <- c(60,70, 130,50,250, 450, 60, 80)
min_value <- c(20,30,90, 10,100,200,20,50) - 10
max_value <- c(60,70, 130,50,250, 450, 60, 80) + 50
outliers_min <- c(1,10,NA, NA, NA, 50, NA, NA)
outliers_max <- c(NA,150, 200,120, NA, NA, NA, 200)
table_result <- data.frame(region=regions.value, subsection=choices_value,  median = median_value, min = min_value, max = max_value, first_quantile, third_quantile, outliers_min, outliers_max)
grouped_boxplot_impact(table_result, region, subsection, "cashincome", median, min, max, first_quantile, third_quantile, outliers_min , outliers_max ,sens.boxplot = "vertical")
regions.value=c("capitalcentral","capitalcentral","capitalcentral","north", "north","north","south","south","south","west","west","west")
choices_value=c("yes","no", "bb","yes","no", "bb","yes","no","bb","yes","no","bb")
median_value=c(40,50,100,30,200,300,50,70, 20,50, 60, 70 )
first_quantile <- c(20,30,90, 10,100,200,20,50, 10,40,50,60)
third_quantile <- c(60,70, 130,50,250, 450, 60, 80, 40,60,80,100)
min_value <- c(20,30,90, 10,100,200,20,50, 10,40,50,60) - 10
max_value <- c(60,70, 130,50,250, 450, 60, 80, 40,60,80,100) + 50
outliers_min <- c(1,10,NA, NA, NA, 50, NA, NA, 5,30,10,10)
outliers_max <- c(NA,150, 200,120, NA, NA, NA, 300,100, 200, 300, 250)
table_result <- data.frame(region=regions.value, subsection=choices_value,  median = median_value, min = min_value, max = max_value, first_quantile, third_quantile, outliers_min, outliers_max)
grouped_boxplot_impact(table_result, region, subsection, "cashincome", median, min, max, first_quantile, third_quantile, outliers_min , outliers_max ,sens.boxplot = "vertical")
regions.value=c("capitalcentral", "north","west","west","capitalcentral","north","south","south")
choices_value=c("yes","yes","yes","no","no","no","no","yes")
median_value=c(40,50,100,30,200,300,50,70 )
first_quantile <- c(20,30,90, 10,100,200,20,50)
third_quantile <- c(60,70, 130,50,250, 450, 60, 80)
min_value <- c(20,30,90, 10,100,200,20,50) - 10
max_value <- c(60,70, 130,50,250, 450, 60, 80) + 50
outliers_min <- c(1,10,NA, NA, NA, 50, NA, NA)
outliers_max <- c(NA,150, 200,120, NA, NA, NA, 200)
table_result <- data.frame(region=regions.value, subsection=choices_value,  median = median_value, min = min_value, max = max_value, first_quantile, third_quantile, outliers_min, outliers_max)
grouped_boxplot_impact(table_result, region, subsection, "cashincome", median, min, max, first_quantile, third_quantile, outliers_min , outliers_max ,sens.boxplot = "vertical")
regions.value=c("capitalcentral", "north","west","west","capitalcentral","north","south","south")
choices_value=c(NA,"yes","yes","no","no",NA,"no","yes")
median_value=c(NA,50,100,30,200,300,50,70 )
first_quantile <- c(NA,30,90, 10,100,200,20,50)
third_quantile <- c(NA,70, 130,50,250, 450, 60, 80)
min_value <- c(NA,30,90, 10,100,200,20,50) - 10
max_value <- c(NA,70, 130,50,250, 450, 60, 80) + 50
outliers_min <- c(NA,10,NA, NA, NA, 50, NA, NA)
outliers_max <- c(NA,150, 200,120, NA, NA, NA, 200)
table_result <- data.frame(region=regions.value, subsection=choices_value,  median = median_value, min = min_value, max = max_value, first_quantile, third_quantile, outliers_min, outliers_max)
grouped_boxplot_impact(table_result, region, subsection, "cashincome", median, min, max, first_quantile, third_quantile, outliers_min , outliers_max ,sens.boxplot = "vertical")
file <- readRDS(file.choose())
file <- readRDS(file.choose("../tests/testthat/output_hypegrammaR.RDS"))
file <- readRDS("../tests/testthat/output_hypegrammaR.RDS")
output <- readRDS("../tests/testthat/output_hypegrammaR.RDS")
output$results
output$analysisplan
output$results
output$results$summary.statistic
output
output$results[[1]]
View(output)
View(output)
#' @param filename (chr) What to call the pdf.
#'
#' @return Invisible NULL.
#' @export
#'
#' @examples
#' #plot histogram of each numeric variable in iris
#' list_iris = map(names(iris[-5]), ~ggplot(iris, aes_string(.)) + geom_histogram())
#' #save to a single pdf
#' GG_save_pdf(list_iris, "test.pdf")
GG_save_pdf = function(list, filename) {
#start pdf
pdf(filename)
#loop
for (p in list) {
print(p)
}
#end pdf
dev.off()
invisible(NULL)
}
output$results[[1]]$summary.statistic
sens <- orientation_plot(.data = data1, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
data1 <- output$results[[1]]$summary.statistic
sens <- orientation_plot(.data = data1, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
data1
grouped_barchart_impact(data1,x = dependent.var,value, subset.x = independent.var.value , y = numbers, infimum_error = min , supremum_error = max, sens.barchart = , percent = TRUE)
grouped_barchart_impact(data1,x = dependent.var.value, subset.x = independent.var.value , y = numbers, infimum_error = min , supremum_error = max, sens.barchart = , percent = TRUE)
sens
grouped_barchart_impact(data1,x = dependent.var.value, subset.x = independent.var.value , y = numbers, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = TRUE)
sens <- orientation_plot(.data = data1, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
grouped_barchart_impact(data1,x = dependent.var.value, subset.x = independent.var.value , y = numbers, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = TRUE)
grouped_barchart_impact(data1,x = dependent.var.value, subset.x = independent.var.value , y = numbers*100, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = TRUE)
output
grouped_barchart_impact(data1,x = dependent.var.value, subset.x = independent.var.value , y = numbers*100, infimum_error = min*100 , supremum_error = max*100, sens.barchart = sens , percent = TRUE)
sens <- orientation_plot(.data = data2, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
data2 <- output$results[[2]]$summary.statistic
grouped_barchart_impact(data2,x = dependent.var.value, subset.x = independent.var.value , y = numbers*100, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = TRUE)
sens <- orientation_plot(.data = data2, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
grouped_barchart_impact(data2,x = dependent.var.value, subset.x = independent.var.value , y = numbers*100, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = TRUE)
for(i in 1:4){
data <- output$results[[i]]$summary.statistic
sens <- orientation_plot(.data = data2, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
grouped_barchart_impact(data,x = dependent.var.value, subset.x = independent.var.value , y = numbers*100, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = TRUE)
}
for(i in 1:4){
data <- output$results[[i]]$summary.statistic
sens <- orientation_plot(.data = data2, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
list_plot[i]<- grouped_barchart_impact(data,x = dependent.var.value, subset.x = independent.var.value , y = numbers*100, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = TRUE)
}
list_plot <- rep(NA, 29)
for(i in 1:4){
data <- output$results[[i]]$summary.statistic
sens <- orientation_plot(.data = data2, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
list_plot[i]<- grouped_barchart_impact(data,x = dependent.var.value, subset.x = independent.var.value , y = numbers*100, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = TRUE)
}
list_plot
list_plot
list_plot <- NA
for(i in 1:4){
data <- output$results[[i]]$summary.statistic
sens <- orientation_plot(.data = data2, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
list_plot[i]<- grouped_barchart_impact(data,x = dependent.var.value, subset.x = independent.var.value , y = numbers*100, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = TRUE)
}
list_plot <- rep(NA,29)
for(i in 1:4){
data <- output$results[[i]]$summary.statistic
sens <- orientation_plot(.data = data2, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
list_plot[i]<- grouped_barchart_impact(data,x = dependent.var.value, subset.x = independent.var.value , y = numbers*100, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = TRUE)
}
list_plot
for(i in 1:4){
data <- output$results[[i]]$summary.statistic
sens <- orientation_plot(.data = data2, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
list_plot[i]<- grouped_barchart_impact(data,x = dependent.var.value, subset.x = independent.var.value , y = numbers*100, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = TRUE)
}
plot<- grouped_barchart_impact(data,x = dependent.var.value, subset.x = independent.var.value , y = numbers*100, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = TRUE)
list_plot[1] <- plot
list_plot <- NA
for(i in 1:4){
data <- output$results[[i]]$summary.statistic
sens <- orientation_plot(.data = data2, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
plot<- grouped_barchart_impact(data,x = dependent.var.value, subset.x = independent.var.value , y = numbers*100, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = TRUE)
}
for(i in 1:4){
data <- output$results[[i]]$summary.statistic
sens <- orientation_plot(.data = data2, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
list_plot[i]<- grouped_barchart_impact(data,x = dependent.var.value, subset.x = independent.var.value , y = numbers*100, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = TRUE)
}
GG_save_pdf = function(list_plot, "test.pdf")
GG_save_pdf(list_plot, "test.pdf")
pdf("all.pdf")
invisible(lapply(list_plot, print))
dev.off()
invisible(mapply(ggsave, file=paste0("plot-", names(list_plot), ".pdf"), plot=l))
invisible(mapply(ggsave, file=paste0("plot-", names(list_plot), ".pdf"), plot=list_plot))
invisible(mapply(ggsave, file=paste0("plot-", names(list_plot), ".pdf"), plot=list_plot))
invisible(mapply(ggsave, file=paste0("plot-", c("1","2","3","4"), ".pdf"), plot=list_plot))
list_plot[i]
for(i in 1:4){
data <- output$results[[i]]$summary.statistic
sens <- orientation_plot(.data = data2, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
list_plot[i]<- grouped_barchart_impact(data,x = dependent.var.value, subset.x = independent.var.value , y = numbers*100, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = TRUE)
list_plot[i]
}
list_plot[1]
sens <- orientation_plot(.data = data1, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
i=1
sens <- orientation_plot(.data = data1, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
i=1
data1 <- output$results[[i]]$summary.statistic
sens <- orientation_plot(.data = data1, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
grouped_barchart_impact(data1,x = dependent.var.value, subset.x = independent.var.value , y = numbers*100, infimum_error = min*100 , supremum_error = max*100, sens.barchart = sens , percent = TRUE)
i=2
data1 <- output$results[[i]]$summary.statistic
grouped_barchart_impact(data1,x = dependent.var.value, subset.x = independent.var.value , y = numbers*100, infimum_error = min*100 , supremum_error = max*100, sens.barchart = sens , percent = TRUE)
i=3
data1 <- output$results[[i]]$summary.statistic
sens <- orientation_plot(.data = data1, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
grouped_barchart_impact(data1,x = dependent.var.value, subset.x = independent.var.value , y = numbers*100, infimum_error = min*100 , supremum_error = max*100, sens.barchart = sens , percent = TRUE)
data1
grouped_barchart_impact(data1,x = dependent.var.value, subset.x = independent.var.value , y = numbers*100, infimum_error = min*100 , supremum_error = max*100, sens.barchart = sens , percent = TRUE)
i=4
data1 <- output$results[[i]]$summary.statistic
sens <- orientation_plot(.data = data1, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
grouped_barchart_impact(data1,x = dependent.var.value, subset.x = independent.var.value , y = numbers*100, infimum_error = min*100 , supremum_error = max*100, sens.barchart = sens , percent = TRUE)
data1
data2 <- output$results[[5]]$summary.statistic
data2
barchart_impact(data2,x = independent.var.value , y = numbers*100, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = TRUE)
barchart_impact(data2,x = independent.var.value , y = numbers*100, infimum_error = min*100 , supremum_error = max*100, sens.barchart = sens , percent = TRUE)
data2
barchart_impact(data2,x = independent.var.value , y = numbers*100, infimum_error = min*100 , supremum_error = max*100, sens.barchart = sens , percent = TRUE)
barchart_impact(data2,x = independent.var.value , y = numbers, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = FALSE)
data2 <- output$results[[6]]$summary.statistic
sens <- orientation_plot(.data = data2, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
barchart_impact(data2,x = independent.var.value , y = numbers, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = FALSE)
data2 <- output$results[[7]]$summary.statistic
sens <- orientation_plot(.data = data2, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
barchart_impact(data2,x = independent.var.value , y = numbers, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = FALSE)
data2 <- output$results[[8]]$summary.statistic
sens <- orientation_plot(.data = data2, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
barchart_impact(data2,x = independent.var.value , y = numbers, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = FALSE)
data2 <- output$results[[9]]$summary.statistic
sens <- orientation_plot(.data = data2, x.label = dependent.var.value,max_nbr_var = 20,size_max_label = 60 )
barchart_impact(data2,x = independent.var.value , y = numbers, infimum_error = min , supremum_error = max, sens.barchart = sens , percent = FALSE)
data2
